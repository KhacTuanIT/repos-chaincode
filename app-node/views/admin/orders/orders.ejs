<div class="header bg-primary pb-6">
    <div class="container-fluid">
        <div class="header-body">
            <div class="row align-items-center py-4">
                <div class="col-lg-6 col-7">
                    <nav aria-label="breadcrumb" class="d-none d-md-inline-block ml-md-4">
                        <ol class="breadcrumb breadcrumb-links breadcrumb-dark">
                            <li class="breadcrumb-item">
                                <a href="/admin"><i class="fas fa-home"></i></a>
                            </li>
                            <li class="breadcrumb-item">
                                <a href="/admin/orders">Orders</a>
                            </li>
                            <li class="breadcrumb-item active" aria-current="page">List</li>
                        </ol>
                    </nav>
                </div>
                <div class="col-lg-6 col-5 text-right">
                    <!-- <a href="/admin/orders/add" class="btn btn-sm btn-neutral">New</a> -->
                    <!-- <a href="#" class="btn btn-sm btn-neutral">Filters</a> -->
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Page content -->
<div class="container-fluid mt--6">
    <div class="row">
        <div class="col">
            <div class="card">
                <!-- Card header -->
                <div class="card-header border-0">
                    <h3 class="mb-0">List Orders</h3>
                </div>
                <!-- Light table -->
                <div class="table-responsive">
                    <table class="table align-items-center table-flush">
                        <thead class="thead-light">
                            <tr>
                                <th scope="col" class="sort" data-sort="completion">Order code</th>
                                <th scope="col" class="sort" data-sort="name">Price</th>
                                <th scope="col" class="sort" data-sort="budget">Customer</th>
                                <th scope="col" class="sort" data-sort="budget">Status</th>
                                <th scope="col"></th>
                            </tr>
                        </thead>
                        <tbody class="list" id="admin-product-list"></tbody>
                    </table>
                </div>
                <!-- Card footer -->
                <div class="card-footer py-4">
                    <nav aria-label="..." id="pagination-footer"></nav>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Delete item</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div>Item: <span id="item-modal-name"></span></div>
                <div>Are you sure delete this item?</div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">
                    Cancel
                </button>
                <button type="button" class="btn btn-danger" data-key="" id="btn-delete-modal">
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="exampleModalLong" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalDetailTitle"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="time-line-container">
                    <div class="time-line-wrapper">
                        <h2 class="time-line-header">Timeline</h2>
                        <ul class="sessions"></ul>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<nav class="context-menu" id="context-menu">
    <ul class="context-menu__items">
        <li class="context-menu__item">
            <a href="#" class="context-menu__link" data-type="SHIPMENT_CREATED">
                <i class="fa fa-edit"></i> SHIPMENT_CREATED
            </a>
        </li>
        <!-- <li class="context-menu__item">
            <a href="#" class="context-menu__link" data-type="SHIPMENT_ASSIGNED">
                <i class="fa fa-american-sign-language-interpreting"></i> SHIPMENT_ASSIGNED
            </a>
        </li> -->
        <li class="context-menu__item">
            <a href="#" class="context-menu__link text-success" data-type="SHIPMENT_RECEIVED">
                <i class="fa fa-calendar-check"></i> SHIPMENT_RECEIVED
            </a>
        </li>
        <li class="context-menu__item">
            <a href="#" class="context-menu__link" data-type="SHIPMENT_IN_TRANSIT">
                <i class="fa fa-archive"></i> SHIPMENT_IN_TRANSIT
            </a>
        </li>
        <li class="context-menu__item">
            <a href="#" class="context-menu__link text-danger" data-type="ORDER_CLOSED">
                <i class="fa fa-times"></i> ORDER_CLOSED
            </a>
        </li>
    </ul>
</nav>

<script>

    (function () {

        "use strict";

        //////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////
        //
        // H E L P E R    F U N C T I O N S
        //
        //////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////

        /**
         * Function to check if we clicked inside an element with a particular class
         * name.
         * 
         * @param {Object} e The event
         * @param {String} className The class name to check against
         * @return {Boolean}
         */
        function clickInsideElement(e, className) {
            var el = e.srcElement || e.target;
            const key = el.getAttribute('data-key');
            const elContextLinks = document.getElementsByClassName('context-menu__link');
            for (var i = 0; i < elContextLinks.length; i++) {
                elContextLinks[i].setAttribute('data-key', key);
            };
            if (el.classList.contains(className)) {
                return el;
            } else {
                while (el = el.parentNode) {
                    if (el.classList && el.classList.contains(className)) {
                        return el;
                    }
                }
            }

            return false;
        }

        /**
         * Get's exact position of event.
         * 
         * @param {Object} e The event passed in
         * @return {Object} Returns the x and y position
         */
        function getPosition(e) {
            var posx = 0;
            var posy = 0;

            if (!e) var e = window.event;

            if (e.pageX || e.pageY) {
                posx = e.pageX;
                posy = e.pageY;
            } else if (e.clientX || e.clientY) {
                posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
                posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
            }

            return {
                x: posx - 150,
                y: posy
            }
        }

        //////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////
        //
        // C O R E    F U N C T I O N S
        //
        //////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////

        /**
         * Variables.
         */
        var contextMenuClassName = "context-menu";
        var contextMenuItemClassName = "context-menu__item";
        var contextMenuLinkClassName = "context-menu__link";
        var contextMenuActive = "context-menu--active";

        var taskItemClassName = "update-status-order";
        var taskItemInContext;

        var clickCoords;
        var clickCoordsX;
        var clickCoordsY;

        var menu = document.querySelector("#context-menu");
        var menuItems = menu.querySelectorAll(".context-menu__item");
        var menuState = 0;
        var menuWidth;
        var menuHeight;
        var menuPosition;
        var menuPositionX;
        var menuPositionY;

        var windowWidth;
        var windowHeight;

        /**
         * Initialise our application's code.
         */
        function init() {
            contextListener();
            clickListener();
            keyupListener();
            resizeListener();
        }

        /**
         * Listens for contextmenu events.
         */
        function contextListener() {
            document.addEventListener("contextmenu", function (e) {
                taskItemInContext = clickInsideElement(e, taskItemClassName);

                if (taskItemInContext) {
                    e.preventDefault();
                    toggleMenuOn();
                    positionMenu(e);
                } else {
                    taskItemInContext = null;
                    toggleMenuOff();
                }
            });
        }

        /**
         * Listens for click events.
         */
        function clickListener() {
            document.addEventListener("click", function (e) {
                var clickeElIsLink = clickInsideElement(e, contextMenuLinkClassName);
                if (clickeElIsLink) {
                    e.preventDefault();
                    menuItemListener(clickeElIsLink);
                } else {
                    var button = e.which || e.button;
                    if (button === 1) {
                        toggleMenuOff();
                    }
                }
            });
        }

        /**
         * Listens for keyup events.
         */
        function keyupListener() {
            window.onkeyup = function (e) {
                if (e.keyCode === 27) {
                    toggleMenuOff();
                }
            }
        }

        /**
         * Window resize event listener
         */
        function resizeListener() {
            window.onresize = function (e) {
                toggleMenuOff();
            };
        }

        /**
         * Turns the custom context menu on.
         */
        function toggleMenuOn() {
            if (menuState !== 1) {
                menuState = 1;
                menu.classList.add(contextMenuActive);
            }
        }

        /**
         * Turns the custom context menu off.
         */
        function toggleMenuOff() {
            if (menuState !== 0) {
                menuState = 0;
                menu.classList.remove(contextMenuActive);
            }
        }

        /**
         * Positions the menu properly.
         * 
         * @param {Object} e The event
         */
        function positionMenu(e) {
            clickCoords = getPosition(e);
            clickCoordsX = clickCoords.x;
            clickCoordsY = clickCoords.y;

            menuWidth = menu.offsetWidth + 4;
            menuHeight = menu.offsetHeight + 4;

            windowWidth = window.innerWidth;
            windowHeight = window.innerHeight;

            if ((windowWidth - clickCoordsX) < menuWidth) {
                menu.style.left = windowWidth - menuWidth + "px";
            } else {
                menu.style.left = clickCoordsX + "px";
            }

            if ((windowHeight - clickCoordsY) < menuHeight) {
                menu.style.top = windowHeight - menuHeight + "px";
            } else {
                menu.style.top = clickCoordsY + "px";
            }
        }

        function setOrderStatus(url, params, content) {
            $.ajax({
                url: url,
                type: 'POST',
                data: params,
                success: function (res) {
                    let span = document.querySelector('span[data-key="' + params.orderId + '"');
                    let parentSpan = span.parentElement;
                    span.innerText = content;
                    parentSpan.className = "budget order-state-" + content.toLowerCase();
                },
                error: function (jq, status, err) {
                    console.log(jq);
                }
            })
        }

        /**
         * Dummy action function that logs an action when a menu item link is clicked
         * 
         * @param {HTMLElement} link The link that was clicked
         */
        function menuItemListener(link) {
            console.log("Task ID - " + taskItemInContext.getAttribute("data-key") + ", Task action - " + link.getAttribute("data-type"));
            switch (link.getAttribute('data-type')) {
                case 'SHIPMENT_CREATED':
                    setOrderStatus('/admin/orders/create-shipment', { orderId: taskItemInContext.getAttribute("data-key"), newTrackingInfo: "Create shipment" }, link.getAttribute("data-type"));
                    break;
                case 'SHIPMENT_ASSIGNED':
                    setOrderStatus('/admin/orders/assign-shipment', { orderId: taskItemInContext.getAttribute("data-key") }, link.getAttribute("data-type"));
                    break;
                case 'SHIPMENT_IN_TRANSIT':
                    setOrderStatus('/admin/orders/transit-shipment', { orderId: taskItemInContext.getAttribute("data-key") }, link.getAttribute("data-type"));
                    break;
                case 'SHIPMENT_RECEIVED':
                    setOrderStatus('/admin/orders/receive-shipment', { orderId: taskItemInContext.getAttribute("data-key") }, link.getAttribute("data-type"));
                    break;
            }
            toggleMenuOff();
        }

        /**
         * Run the app.
         */
        init();

    })();

    var pageSize = 10;
    const mapOrderState = (state) => {
        state = state - 1;
        const orderState = [
            "ORDER_CREATED",
            "ORDER_RECEIVED",
            "SHIPMENT_ASSIGNED",
            "SHIPMENT_CREATED",
            "SHIPMENT_IN_TRANSIT",
            "SHIPMENT_RECEIVED",
            "ORDER_CLOSED",
        ];
        return orderState[state];
    }
    document
        .querySelector("#btn-delete-modal")
        .addEventListener("click", function (e) {
            let key = this.getAttribute("data-key");
            $.ajax({
                url: "/admin/products/delete",
                type: "post",
                data: {
                    productCode: key,
                },
                success: function (res) {
                    if (res.status) {
                        toastr.success(res.message);
                    } else {
                        toastr.error(res.message);
                    }
                },
                error: function (jq, status, err) {
                    let responseError = JSON.parse(jq.responseText);
                    toastr.error(responseError.toString());
                },
            });
        });

    function template(orders) {
        let gridContent = "";
        let order = undefined;
        orders.forEach((prod) => {
            order = prod.Value;
            gridContent +=
                '<tr>';
            gridContent += '<th class="budget">';
            gridContent += order.orderId;
            gridContent += '</th><th class="budget">';
            gridContent += order.user.email;
            gridContent += '</th><td class="budget"> $';
            gridContent += order.price;
            gridContent += '</th><th class="budget order-state-' + mapOrderState(order.currentOrderState).toLowerCase() + '">';
            gridContent += '<span class="update-status-order" data-key="' + order.orderId + '">' + mapOrderState(order.currentOrderState) + '</span>';
            gridContent +=
                '</th><td class="text-right"><div class="dropdown"><a class="btn btn-sm btn-icon-only text-light" href="#" role="button"' +
                'data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">' +
                '<i class="fas fa-ellipsis-v"></i>' +
                "</a>" +
                '<div class="dropdown-menu dropdown-menu-right dropdown-menu-arrow">' +
                '<a class="dropdown-item showup-detail-modal" data-name="' +
                order.orderId +
                '" data-key="' +
                order.orderId +
                '">Detail</a>' +
                '<a class="dropdown-item showup-delete-modal" data-name="' +
                order.orderId +
                '" data-key="' +
                order.orderId +
                '" data-toggle="modal" onclick="loadDeleteModal(this)" data-target="#exampleModalCenter">Delete</a>' +
                "</div>" +
                "</div>" +
                "</td>" +
                "</tr>";
        });
        return gridContent;
    }

    function loadDeleteModal(e) {
        let name = e.getAttribute("data-name");
        let key = e.getAttribute("data-key");
        console.log(key);
        document.getElementById("item-modal-name").innerText = name;
        document.getElementById("btn-delete-modal").setAttribute("data-key", key);
    }

    $(document).on("click", ".showup-detail-modal", function () {
        let name = $(this).data("name");
        let key = $(this).data("key");
        $.ajax({
            url: `/api/get-order-history/${key}`,
            type: "get",
            success: function (res) {
                if (res.status) {
                    let { history } = res;
                    if (history.length > 0) {
                        let historyContent = "";
                        history.forEach((his) => {
                            historyContent +=
                                '<li class="time-line-list"><div class="time">' + his.Timestamp;
                            if (his.Value.is_delete) {
                                historyContent +=
                                    '<div class="time-line-badge time-line-badge-delete">Deleted</div>' +
                                    "</div><div> TxID: " +
                                    his.TxId +
                                    "</div>";
                            } else {
                                if (his.Value.updated_by != "") {
                                    historyContent +=
                                        '<div class="time-line-badge time-line-badge-update">Updated</div>' +
                                        "</div><div> TxID: " +
                                        his.TxId +
                                        "</div>";
                                } else {
                                    historyContent +=
                                        '<div class="time-line-badge time-line-badge-create">Create</div>' +
                                        "</div><div> TxID: " +
                                        his.TxId +
                                        "</div>";
                                }
                            }
                            historyContent +=
                                '<div id="accordion_' +
                                his.TxId +
                                '">' +
                                '<div class="card">' +
                                '<div class="card-header" id="heading_' +
                                his.TxId +
                                '">' +
                                '<h5 class="mb-0">' +
                                "<button" +
                                ' class="btn btn-link"' +
                                ' data-toggle="collapse"' +
                                ' data-target="#collapse_' +
                                his.TxId +
                                '"' +
                                ' aria-expanded="true"' +
                                ' aria-controls="collapse_' +
                                his.TxId +
                                '"' +
                                ">" +
                                his.Value.orderId +
                                "[Doc type: " +
                                his.Value.docType +
                                "]" +
                                "</button>" +
                                "</h5>" +
                                "</div>" +
                                "<div " +
                                'id="collapse_' +
                                his.TxId +
                                '" ' +
                                'class="collapse"' +
                                ' aria-labelledby="heading_' +
                                his.TxId +
                                '"' +
                                ' data-parent="#accordion_' +
                                his.TxId +
                                '"' +
                                ">" +
                                '<div class="card-body"><div class="row">';
                            for (const [key, value] of Object.entries(his.Value)) {
                                if (key === "manufacturer") {
                                    historyContent +=
                                        '<div class="col-sm-4">' +
                                        key +
                                        '</div><div class="col-sm-8">' +
                                        value.Value.name +
                                        "</div>";
                                } else {
                                    historyContent +=
                                        '<div class="col-sm-4">' +
                                        key +
                                        '</div><div class="col-sm-8">' +
                                        value +
                                        "</div>";
                                }
                            }
                            historyContent +=
                                "</div></div>" + "</div>" + "</div>" + "</div>" + "</li>";
                        });
                        document.getElementsByClassName("sessions")[0].innerHTML =
                            historyContent;
                    }
                    $("#exampleModalLong").modal("show");
                    document.getElementById("exampleModalDetailTitle").innerText = name;
                } else {
                    toastr.warn(res.message);
                }
            },
            error: function (jq, status, err) {
                console.log(jq);
                let responseError = JSON.parse(jq.responseText);
                toastr.error(responseError.toString());
            },
        });
    });

    $(document).ready(function () {
        const loadProduct = () => {
            $.ajax({
                url: "/api/orders",
                type: "get",
                data: {
                    org: "supply",
                },
                success: function (res) {
                    if (res?.data) {
                        let { data } = res;

                        $("#admin-product-list").empty();
                        let dataContainer = $("#admin-product-list");
                        $("#pagination-footer").pagination({
                            dataSource: data,
                            pageSize: pageSize,
                            showGoInput: true,
                            showGoButton: true,
                            callback: function (data, pagination) {
                                var html = template(data);
                                dataContainer.html(html);
                            },
                        });
                    } else {
                        $("#admin-product-list").empty();
                        $("#admin-product-list").append(
                            '<div class="col-lg-12 col-md-12 col-sm-12 mt-40 d-flex justify-content-center">Not found any products</div>'
                        );
                    }
                },
                error: function (r, h, e) {
                    console.log(e);
                    $("#admin-product-list").empty();
                    $("#admin-product-list").append(
                        '<div class="col-lg-12 col-md-12 col-sm-12 mt-40 d-flex justify-content-center">Not found any products</div>'
                    );
                },
            });
        };

        let pathname = window.location.pathname;
        if (pathname.includes("admin/orders")) {
            loadProduct();
        }
    });
</script>